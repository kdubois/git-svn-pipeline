pipeline {
    agent any
    environment {
        MVN = '/var/jenkins_home/tools/hudson.tasks.Maven_MavenInstallation/maven3/apache-maven-3.5.3/bin/mvn'
        PROJECT = 'CBC'
        SVN_REPO = 'https://my-svn-repo/projectSRC/app/trunk'
        GIT_REPO = "ssh://git@github.com/kdubois/jenkins.git"
        GIT_USER = "my_git_user_name"
        GIT_EMAIL = "my_git_email"
    }
    parameters {
        booleanParam(name: 'DO_RELEASE', defaultValue: false, description: 'Merge a given release branch into master and release the code to Subversion')
        string(name: "RELEASE_BRANCH", defaultValue: '', description: 'The branch to release from, eg. release_1.0')
        string(name: "TAG", defaultValue: '', description: 'Optional, tag git repositories and Docker Images with this tag')
    }
    stages {
        stage('Checkout from Subversion') {
            agent any
            steps {
                script {
                    if (!fileExists('.git/svn/refs')) {
                        withCredentials([usernamePassword(credentialsId: 'xyz', passwordVariable: 'svn_pw', usernameVariable: 'svn_user')]) {
                            cleanWs()
                            // If you get server certificate validation errors, you may need to log in to the Jenkins server via CLI and first run an 'svn list <url>' command
                            sh "svn --username=${svn_user} --password=${svn_pw} list ${SVN_REPO} << EOF\n" +
                                    "p\n" +
                                    "EOF"
                            sh "svn --username=${svn_user} --password=${svn_pw}  export ${SVN_REPO}/authors.txt authors_tmp.txt"
                            sh "echo ${svn_pw} | git svn clone --username=${svn_user} --authors-file=authors_tmp.txt ${SVN_REPO} . "
                        }
                        sh "git remote add origin ${GIT_REPO}"
                        sh "git config user.name \"${GIT_USER}\""
                        sh "git config user.email \"${GIT_EMAIL}\""
                        sh 'git fetch'

                        sh  "   if [ ! -z `git rev-parse --verify --quiet master` ]\n" +
                                "   then\n" +
                                "     echo \"Branch name master already exists.\"\n" +
                                "     git branch --set-upstream-to=origin/master master\n" +
                                "   else\n" +
                                "     git push -u origin master\n" +
                                "     git checkout -b develop\n" +
                                "     git push -u origin develop\n" +
                                "   fi   \n"
                    }
                }
            }
        }
        stage('Rebase from Subversion') {
            agent any
            steps {
                sh "git checkout master"
                sh "git reset --hard origin/master"
                withCredentials([usernamePassword(credentialsId: 'xyz', passwordVariable: 'svn_pw', usernameVariable: 'svn_user')]) {
                    sh "echo ${svn_pw} | git svn rebase --use-log-author"
                }
            }
        }
        stage('Merge Release into master branch') {
            agent any
            when {
                beforeAgent true
                expression {
                    return params.DO_RELEASE == true && params.RELEASE_BRANCH != ''
                }
            }
            steps {
                sh "git checkout ${RELEASE_BRANCH}"
                sh "git pull"
                sh "git merge master"
                sh "git push -f origin ${RELEASE_BRANCH}"
                sh "git checkout master"
                sh "git merge ${RELEASE_BRANCH}"
                sh "git push -f origin master"
            }
        }
        stage('Trigger App Build Quality Job') {
            agent any
            steps {
                script {
                    BRANCH_NAME = env.CUSTOM_BRANCH == null ? env.BRANCH_NAME : env.CUSTOM_BRANCH
                }
                // This references an actual jenkins job that triggers a build with some quality verifications
                build job: "${PROJECT}_App_Build_Quality", parameters: [string(name: 'sourceBranch', value: 'master')]
            }
        }
        stage('Run Integration/Automation Tests, tag repository and images') {
            agent any
            when {
                expression {
                    return params.DO_RELEASE == true || params.TAG != ''
                }
            }
            steps {
                // This references a Jenkins pipeline that builds Docker images and tags them with the release version
                build job: "${PROJECT}_Custom_Pipeline", parameters: [string(name: 'CUSTOM_BRANCH', value: 'master'), string(name: 'TAG', value: "${TAG}")]
                sh 'git checkout master'
                sh "git tag ${TAG}"
                sh "git push origin ${TAG}"
            }
        }
        stage('Commit Changes to Svn') {
            agent any
            steps {
                sh 'git checkout master'
                sh "git svn dcommit --add-author-from --use-log-author"
            }
        }
        stage('Push updates to master and develop') {
            agent any
            steps {
                sh 'git checkout master'
                sh "git push -f origin master"
                sh "git checkout develop"
                sh "git pull"
                sh "git rebase master"
                sh "git push -f origin develop"
                sh "git checkout master"
            }
        }
    }
}
